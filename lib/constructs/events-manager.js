'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.EventsManager = void 0;
const lambdaPython = require('@aws-cdk/aws-lambda-python-alpha');
const aws_cdk_lib_1 = require('aws-cdk-lib');
const appsync = require('aws-cdk-lib/aws-appsync');
const dynamodb = require('aws-cdk-lib/aws-dynamodb');
const iam = require('aws-cdk-lib/aws-iam');
const lambda = require('aws-cdk-lib/aws-lambda');
const awscdk_appsync_utils_1 = require('awscdk-appsync-utils');
const constructs_1 = require('constructs');
class EventsManager extends constructs_1.Construct {
  constructor(scope, id, props) {
    super(scope, id);
    const events_table = new dynamodb.Table(this, 'EventsTable', {
      partitionKey: {
        name: 'eventId',
        type: dynamodb.AttributeType.STRING,
      },
      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
      encryption: dynamodb.TableEncryption.AWS_MANAGED,
      removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
    });
    const events_handler = new lambdaPython.PythonFunction(this, 'eventsFunction', {
      entry: 'lib/lambdas/events_function/',
      description: 'Events Resolver',
      index: 'index.py',
      handler: 'lambda_handler',
      timeout: aws_cdk_lib_1.Duration.minutes(1),
      runtime: props.lambdaConfig.runtime,
      tracing: lambda.Tracing.ACTIVE,
      memorySize: 128,
      bundling: { image: props.lambdaConfig.bundlingImage },
      //            layers: [base_stack._powertools_layer], // TODO uncomment when fixed in base stack
      environment: {
        DDB_TABLE: events_table.tableName,
        user_pool_id: props.userPoolId,
        POWERTOOLS_SERVICE_NAME: 'events_resolver',
        LOG_LEVEL: props.lambdaConfig.layersConfig.powerToolsLogLevel,
      },
    });
    events_table.grantReadWriteData(events_handler);
    // Define the data source for the API
    const events_data_source = props.appsyncApi.api.addLambdaDataSource(
      'EventsDataSource',
      events_handler
    );
    // Define API Schema
    const events_object_Type = new awscdk_appsync_utils_1.ObjectType('Event', {
      definition: {
        eventId: awscdk_appsync_utils_1.GraphqlType.id(),
        createdAt: awscdk_appsync_utils_1.GraphqlType.awsDateTime(),
        eventName: awscdk_appsync_utils_1.GraphqlType.string(),
        eventDate: awscdk_appsync_utils_1.GraphqlType.awsDate(),
        fleetId: awscdk_appsync_utils_1.GraphqlType.id(),
        countryCode: awscdk_appsync_utils_1.GraphqlType.string(),
        raceRankingMethod: awscdk_appsync_utils_1.GraphqlType.string(),
        raceTimeInMin: awscdk_appsync_utils_1.GraphqlType.int(),
        raceNumberOfResets: awscdk_appsync_utils_1.GraphqlType.int(),
        raceLapsToFinish: awscdk_appsync_utils_1.GraphqlType.int(),
        raceTrackType: awscdk_appsync_utils_1.GraphqlType.string(),
      },
    });
    props.appsyncApi.schema.addType(events_object_Type);
    // Event methods
    props.appsyncApi.schema.addQuery(
      'getAllEvents',
      new awscdk_appsync_utils_1.ResolvableField({
        returnType: events_object_Type.attribute({ isList: true }),
        dataSource: events_data_source,
      })
    );
    props.appsyncApi.schema.addMutation(
      'addEvent',
      new awscdk_appsync_utils_1.ResolvableField({
        args: {
          eventName: awscdk_appsync_utils_1.GraphqlType.string({ isRequired: true }),
          eventDate: awscdk_appsync_utils_1.GraphqlType.awsDate(),
          fleetId: awscdk_appsync_utils_1.GraphqlType.id(),
          countryCode: awscdk_appsync_utils_1.GraphqlType.string(),
          raceRankingMethod: awscdk_appsync_utils_1.GraphqlType.string({ isRequired: true }),
          raceTimeInMin: awscdk_appsync_utils_1.GraphqlType.int({ isRequired: true }),
          raceNumberOfResets: awscdk_appsync_utils_1.GraphqlType.int({ isRequired: true }),
          raceLapsToFinish: awscdk_appsync_utils_1.GraphqlType.int({ isRequired: true }),
          raceTrackType: awscdk_appsync_utils_1.GraphqlType.string({ isRequired: true }),
        },
        returnType: events_object_Type.attribute(),
        dataSource: events_data_source,
      })
    );
    props.appsyncApi.schema.addSubscription(
      'onAddedEvent',
      new awscdk_appsync_utils_1.ResolvableField({
        returnType: events_object_Type.attribute(),
        dataSource: props.appsyncApi.noneDataSource,
        requestMappingTemplate: appsync.MappingTemplate.fromString(`{
                        "version": "2017-02-28",
                    "payload": $util.toJson($context.arguments.entry)
                    }`),
        responseMappingTemplate: appsync.MappingTemplate.fromString(
          '$util.toJson($context.result)'
        ),
        directives: [awscdk_appsync_utils_1.Directive.subscribe('addEvent')],
      })
    );
    props.appsyncApi.schema.addMutation(
      'deleteEvents',
      new awscdk_appsync_utils_1.ResolvableField({
        args: { eventIds: awscdk_appsync_utils_1.GraphqlType.string({ isRequiredList: true }) },
        returnType: events_object_Type.attribute({ isList: true }),
        dataSource: events_data_source,
      })
    );
    props.appsyncApi.schema.addSubscription(
      'onDeletedEvents',
      new awscdk_appsync_utils_1.ResolvableField({
        returnType: events_object_Type.attribute({ isList: true }),
        dataSource: props.appsyncApi.noneDataSource,
        requestMappingTemplate: appsync.MappingTemplate.fromString(`{
                        "version": "2017-02-28",
                        "payload": $util.toJson($context.arguments.entry)
                    }`),
        responseMappingTemplate: appsync.MappingTemplate.fromString(
          '$util.toJson($context.result)'
        ),
        directives: [awscdk_appsync_utils_1.Directive.subscribe('deleteEvents')],
      })
    );
    props.appsyncApi.schema.addMutation(
      'updateEvent',
      new awscdk_appsync_utils_1.ResolvableField({
        args: {
          eventId: awscdk_appsync_utils_1.GraphqlType.string({ isRequired: true }),
          eventName: awscdk_appsync_utils_1.GraphqlType.string(),
          eventDate: awscdk_appsync_utils_1.GraphqlType.awsDate(),
          fleetId: awscdk_appsync_utils_1.GraphqlType.id(),
          countryCode: awscdk_appsync_utils_1.GraphqlType.string(),
          raceTrackType: awscdk_appsync_utils_1.GraphqlType.string(),
          raceRankingMethod: awscdk_appsync_utils_1.GraphqlType.string(),
          raceTimeInMin: awscdk_appsync_utils_1.GraphqlType.int(),
          raceNumberOfResets: awscdk_appsync_utils_1.GraphqlType.int(),
          raceLapsToFinish: awscdk_appsync_utils_1.GraphqlType.int(),
        },
        returnType: events_object_Type.attribute(),
        dataSource: events_data_source,
      })
    );
    props.appsyncApi.schema.addSubscription(
      'onUpdatedEvent',
      new awscdk_appsync_utils_1.ResolvableField({
        returnType: events_object_Type.attribute(),
        dataSource: props.appsyncApi.noneDataSource,
        requestMappingTemplate: appsync.MappingTemplate.fromString(`{
                        "version": "2017-02-28",
                    "payload": $util.toJson($context.arguments.entry)
                    }`),
        responseMappingTemplate: appsync.MappingTemplate.fromString(
          '$util.toJson($context.result)'
        ),
        directives: [awscdk_appsync_utils_1.Directive.subscribe('updateEvent')],
      })
    );
    // // Grant access so API methods can be invoked
    // for role in roles_to_grant_invoke_access:
    const admin_api_policy = new iam.Policy(this, 'eventsManagerAdminApiPolicy', {
      statements: [
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: ['appsync:GraphQL'],
          resources: [
            `${props.appsyncApi.api.arn}/types/Query/fields/getAllEvents`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/addEvent`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/addedEvent`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/deleteEvent`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/deletedEvent`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/updateEvent`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/addedEvent`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/deletedEvent`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/updatedEvent`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/addTrack`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/deleteTrack`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/updateTrack`,
          ],
        }),
      ],
    });
    admin_api_policy.attachToRole(props.adminGroupRole);
  }
}
exports.EventsManager = EventsManager;
//# sourceMappingURL=data:application/json;base64,
