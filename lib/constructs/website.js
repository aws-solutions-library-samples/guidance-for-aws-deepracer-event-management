'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.Website = void 0;
const aws_cdk_lib_1 = require('aws-cdk-lib');
const cloudfront = require('aws-cdk-lib/aws-cloudfront');
const cloudfront_origins = require('aws-cdk-lib/aws-cloudfront-origins');
const iam = require('aws-cdk-lib/aws-iam');
const s3 = require('aws-cdk-lib/aws-s3');
const s3_deployment = require('aws-cdk-lib/aws-s3-deployment');
const constructs_1 = require('constructs');
class Website extends constructs_1.Construct {
  constructor(scope, id, props) {
    var _a;
    super(scope, id);
    const sourceBucket = new s3.Bucket(this, 'bucket', {
      encryption: s3.BucketEncryption.S3_MANAGED,
      serverAccessLogsBucket: props.logsBucket,
      serverAccessLogsPrefix: `access-logs/${id}-bucket/`,
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
      enforceSSL: true,
      autoDeleteObjects: true,
      removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
      lifecycleRules: [
        { expiration: aws_cdk_lib_1.Duration.days(30) },
        { abortIncompleteMultipartUploadAfter: aws_cdk_lib_1.Duration.days(1) },
      ],
    });
    this.sourceBucket = sourceBucket;
    (_a = sourceBucket.policy) === null || _a === void 0
      ? void 0
      : _a.document.addStatements(
          new iam.PolicyStatement({
            sid: 'AllowSSLRequestsOnly',
            effect: iam.Effect.DENY,
            principals: [new iam.AnyPrincipal()],
            actions: ['s3:*'],
            resources: [sourceBucket.bucketArn, sourceBucket.bucketArn + '/*'],
            conditions: { NumericLessThan: { 's3:TlsVersion': '1.2' } },
          })
        );
    // CloudFront and OAI
    // L2 Experimental variant CF + OAI
    const originAccessIdentity = new cloudfront.OriginAccessIdentity(this, 'OAI');
    const origin = new cloudfront_origins.S3Origin(sourceBucket, {
      originAccessIdentity: originAccessIdentity,
    });
    this.origin = origin;
    if (props.contentPath) {
      new s3_deployment.BucketDeployment(this, 'deploy', {
        sources: [s3_deployment.Source.asset(props.contentPath)],
        destinationBucket: sourceBucket,
        retainOnDelete: false,
      });
    }
  }
}
exports.Website = Website;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2l0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnNpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkNBQXNEO0FBQ3RELHlEQUF5RDtBQUN6RCx5RUFBeUU7QUFDekUsMkNBQTJDO0FBQzNDLHlDQUF5QztBQUN6QywrREFBK0Q7QUFDL0QsMkNBQXVDO0FBT3ZDLE1BQWEsT0FBUSxTQUFRLHNCQUFTO0lBSWxDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBbUI7O1FBQ3pELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxZQUFZLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7WUFDL0MsVUFBVSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVO1lBQzFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQ3hDLHNCQUFzQixFQUFFLGVBQWUsRUFBRSxVQUFVO1lBQ25ELGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTO1lBQ2pELFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGlCQUFpQixFQUFFLElBQUk7WUFDdkIsYUFBYSxFQUFFLDJCQUFhLENBQUMsT0FBTztZQUNwQyxjQUFjLEVBQUU7Z0JBQ2QsRUFBRSxVQUFVLEVBQUUsc0JBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQ2pDLEVBQUMsbUNBQW1DLEVBQUUsc0JBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUM7YUFDeEQ7U0FDRixDQUFDLENBQUE7UUFFTixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQTtRQUU5QixNQUFBLFlBQVksQ0FBQyxNQUFNLDBDQUFFLFFBQVEsQ0FBQyxhQUFhLENBQ3pDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUN0QixHQUFHLEVBQUUsc0JBQXNCO1lBQzNCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUk7WUFDdkIsVUFBVSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDO1lBQ2xDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUNqQixTQUFTLEVBQUU7Z0JBQ1QsWUFBWSxDQUFDLFNBQVM7Z0JBQ3RCLFlBQVksQ0FBQyxTQUFTLEdBQUcsSUFBSTthQUM5QjtZQUNELFVBQVUsRUFBRSxFQUFDLGlCQUFpQixFQUFFLEVBQUMsZUFBZSxFQUFFLEtBQUssRUFBQyxFQUFDO1NBQzFELENBQUMsRUFDSDtRQUVILHFCQUFxQjtRQUNyQixtQ0FBbUM7UUFDbkMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFFN0UsTUFBTSxNQUFNLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFO1lBQ3pELG9CQUFvQixFQUFFLG9CQUFvQjtTQUM3QyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUVwQixJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUU7WUFDbkIsSUFBSSxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtnQkFDL0MsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN4RCxpQkFBaUIsRUFBRSxZQUFZO2dCQUMvQixjQUFjLEVBQUUsS0FBSzthQUN4QixDQUFDLENBQUE7U0FDTDtJQUNILENBQUM7Q0FDSjtBQXZERCwwQkF1REMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IER1cmF0aW9uLCBSZW1vdmFsUG9saWN5IH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgY2xvdWRmcm9udCBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY2xvdWRmcm9udCc7XG5pbXBvcnQgKiBhcyBjbG91ZGZyb250X29yaWdpbnMgZnJvbSAnYXdzLWNkay1saWIvYXdzLWNsb3VkZnJvbnQtb3JpZ2lucyc7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBzMyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0ICogYXMgczNfZGVwbG95bWVudCBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMtZGVwbG95bWVudCc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IGludGVyZmFjZSBXZWJzaXRlUHJvcHMge1xuICBsb2dzQnVja2V0OiBzMy5JQnVja2V0LFxuICBjb250ZW50UGF0aD86IHN0cmluZyxcbn1cblxuZXhwb3J0IGNsYXNzIFdlYnNpdGUgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAgIHB1YmxpYyByZWFkb25seSBvcmlnaW46IGNsb3VkZnJvbnQuSU9yaWdpbjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgc291cmNlQnVja2V0OiBzMy5JQnVja2V0O1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFdlYnNpdGVQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQodGhpcywgXCJidWNrZXRcIiwge1xuICAgICAgICAgICAgZW5jcnlwdGlvbjogczMuQnVja2V0RW5jcnlwdGlvbi5TM19NQU5BR0VELFxuICAgICAgICAgICAgc2VydmVyQWNjZXNzTG9nc0J1Y2tldDogcHJvcHMubG9nc0J1Y2tldCxcbiAgICAgICAgICAgIHNlcnZlckFjY2Vzc0xvZ3NQcmVmaXg6IGBhY2Nlc3MtbG9ncy8ke2lkfS1idWNrZXQvYCxcbiAgICAgICAgICAgIGJsb2NrUHVibGljQWNjZXNzOiBzMy5CbG9ja1B1YmxpY0FjY2Vzcy5CTE9DS19BTEwsXG4gICAgICAgICAgICBlbmZvcmNlU1NMOiB0cnVlLFxuICAgICAgICAgICAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG4gICAgICAgICAgICByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gICAgICAgICAgICBsaWZlY3ljbGVSdWxlczogW1xuICAgICAgICAgICAgICB7IGV4cGlyYXRpb246IER1cmF0aW9uLmRheXMoMzApIH0sXG4gICAgICAgICAgICAgIHthYm9ydEluY29tcGxldGVNdWx0aXBhcnRVcGxvYWRBZnRlcjogRHVyYXRpb24uZGF5cygxKX1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9KVxuXG4gICAgICB0aGlzLnNvdXJjZUJ1Y2tldCA9IHNvdXJjZUJ1Y2tldFxuXG4gICAgICAgIHNvdXJjZUJ1Y2tldC5wb2xpY3k/LmRvY3VtZW50LmFkZFN0YXRlbWVudHMoXG4gICAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgc2lkOiBcIkFsbG93U1NMUmVxdWVzdHNPbmx5XCIsXG4gICAgICAgICAgICBlZmZlY3Q6IGlhbS5FZmZlY3QuREVOWSxcbiAgICAgICAgICAgIHByaW5jaXBhbHM6IFtuZXcgaWFtLkFueVByaW5jaXBhbF0sXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJzMzoqXCJdLFxuICAgICAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAgICAgIHNvdXJjZUJ1Y2tldC5idWNrZXRBcm4sXG4gICAgICAgICAgICAgIHNvdXJjZUJ1Y2tldC5idWNrZXRBcm4gKyBcIi8qXCIsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgY29uZGl0aW9uczoge1wiTnVtZXJpY0xlc3NUaGFuXCI6IHtcInMzOlRsc1ZlcnNpb25cIjogXCIxLjJcIn19LFxuICAgICAgICAgIH0pXG4gICAgICAgIClcblxuICAgICAgLy8gQ2xvdWRGcm9udCBhbmQgT0FJXG4gICAgICAvLyBMMiBFeHBlcmltZW50YWwgdmFyaWFudCBDRiArIE9BSVxuICAgICAgY29uc3Qgb3JpZ2luQWNjZXNzSWRlbnRpdHkgPSBuZXcgY2xvdWRmcm9udC5PcmlnaW5BY2Nlc3NJZGVudGl0eSh0aGlzLCAnT0FJJylcblxuICAgICAgY29uc3Qgb3JpZ2luID0gbmV3IGNsb3VkZnJvbnRfb3JpZ2lucy5TM09yaWdpbihzb3VyY2VCdWNrZXQsIHtcbiAgICAgICAgICBvcmlnaW5BY2Nlc3NJZGVudGl0eTogb3JpZ2luQWNjZXNzSWRlbnRpdHlcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMub3JpZ2luID0gb3JpZ2luXG5cbiAgICAgIGlmIChwcm9wcy5jb250ZW50UGF0aCkge1xuICAgICAgICAgIG5ldyBzM19kZXBsb3ltZW50LkJ1Y2tldERlcGxveW1lbnQodGhpcywgJ2RlcGxveScsIHtcbiAgICAgICAgICAgICAgc291cmNlczogW3MzX2RlcGxveW1lbnQuU291cmNlLmFzc2V0KHByb3BzLmNvbnRlbnRQYXRoKV0sXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uQnVja2V0OiBzb3VyY2VCdWNrZXQsXG4gICAgICAgICAgICAgIHJldGFpbk9uRGVsZXRlOiBmYWxzZVxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxufVxuIl19
