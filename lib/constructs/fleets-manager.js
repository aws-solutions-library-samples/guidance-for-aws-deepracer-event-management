'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.FleetsManager = void 0;
const aws_cdk_lib_1 = require('aws-cdk-lib');
const appsync = require('aws-cdk-lib/aws-appsync');
const dynamodb = require('aws-cdk-lib/aws-dynamodb');
const iam = require('aws-cdk-lib/aws-iam');
const lambda = require('aws-cdk-lib/aws-lambda');
const lambdaPython = require('@aws-cdk/aws-lambda-python-alpha');
const awscdk_appsync_utils_1 = require('awscdk-appsync-utils');
const constructs_1 = require('constructs');
class FleetsManager extends constructs_1.Construct {
  constructor(scope, id, props) {
    super(scope, id);
    const fleets_table = new dynamodb.Table(this, 'FleetsTable', {
      partitionKey: {
        name: 'fleetId',
        type: dynamodb.AttributeType.STRING,
      },
      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
      encryption: dynamodb.TableEncryption.AWS_MANAGED,
      removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
    });
    const fleets_handler = new lambdaPython.PythonFunction(this, 'fleetsFunction', {
      entry: 'lib/lambdas/fleets_function/',
      description: 'Fleets Resolver',
      index: 'index.py',
      handler: 'lambda_handler',
      timeout: aws_cdk_lib_1.Duration.minutes(1),
      runtime: props.lambdaConfig.runtime,
      tracing: lambda.Tracing.ACTIVE,
      memorySize: 128,
      architecture: props.lambdaConfig.architecture,
      bundling: {
        image: props.lambdaConfig.bundlingImage,
      },
      //            layers: [base_stack._powertools_layer],   // TODO uncomment when fixed in base stack
      environment: {
        DDB_TABLE: fleets_table.tableName,
        user_pool_id: props.userPoolId,
        POWERTOOLS_SERVICE_NAME: 'fleets_resolver',
        LOG_LEVEL: props.lambdaConfig.layersConfig.powerToolsLogLevel,
      },
    });
    fleets_table.grantReadWriteData(fleets_handler);
    // Define the data source for the API
    const fleets_data_source = props.appsyncApi.api.addLambdaDataSource(
      'FleetsDataSource',
      fleets_handler
    );
    // Define API Schema
    const fleets_object_Type = new awscdk_appsync_utils_1.ObjectType('Fleet', {
      definition: {
        fleetName: awscdk_appsync_utils_1.GraphqlType.string(),
        fleetId: awscdk_appsync_utils_1.GraphqlType.id(),
        createdAt: awscdk_appsync_utils_1.GraphqlType.awsDateTime(),
        carIds: awscdk_appsync_utils_1.GraphqlType.id({ isList: true }),
      },
    });
    props.appsyncApi.schema.addType(fleets_object_Type);
    // Fleet methods
    props.appsyncApi.schema.addQuery(
      'getAllFleets',
      new awscdk_appsync_utils_1.ResolvableField({
        returnType: fleets_object_Type.attribute({ isList: true }),
        dataSource: fleets_data_source,
      })
    );
    props.appsyncApi.schema.addMutation(
      'addFleet',
      new awscdk_appsync_utils_1.ResolvableField({
        args: {
          fleetName: awscdk_appsync_utils_1.GraphqlType.string({ isRequired: true }),
          carIds: awscdk_appsync_utils_1.GraphqlType.string({ isList: true }),
        },
        returnType: fleets_object_Type.attribute(),
        dataSource: fleets_data_source,
      })
    );
    props.appsyncApi.schema.addSubscription(
      'onAddedFleet',
      new awscdk_appsync_utils_1.ResolvableField({
        returnType: fleets_object_Type.attribute(),
        dataSource: props.appsyncApi.noneDataSource,
        requestMappingTemplate: appsync.MappingTemplate.fromString(`{
                        "version": "2017-02-28",
                        "payload": $util.toJson($context.arguments.entry)
                    }`),
        responseMappingTemplate: appsync.MappingTemplate.fromString(
          '$util.toJson($context.result)'
        ),
        directives: [awscdk_appsync_utils_1.Directive.subscribe('addFleet')],
      })
    );
    props.appsyncApi.schema.addMutation(
      'deleteFleets',
      new awscdk_appsync_utils_1.ResolvableField({
        args: { fleetIds: awscdk_appsync_utils_1.GraphqlType.string({ isRequiredList: true }) },
        returnType: fleets_object_Type.attribute({ isList: true }),
        dataSource: fleets_data_source,
      })
    );
    props.appsyncApi.schema.addSubscription(
      'onDeletedFleets',
      new awscdk_appsync_utils_1.ResolvableField({
        returnType: fleets_object_Type.attribute({ isList: true }),
        dataSource: props.appsyncApi.noneDataSource,
        requestMappingTemplate: appsync.MappingTemplate.fromString(`{
                        "version": "2017-02-28",
                    "payload": $util.toJson($context.arguments.entry)
                    }`),
        responseMappingTemplate: appsync.MappingTemplate.fromString(
          '$util.toJson($context.result)'
        ),
        directives: [awscdk_appsync_utils_1.Directive.subscribe('deleteFleets')],
      })
    );
    props.appsyncApi.schema.addMutation(
      'updateFleet',
      new awscdk_appsync_utils_1.ResolvableField({
        args: {
          fleetId: awscdk_appsync_utils_1.GraphqlType.string({ isRequired: true }),
          fleetName: awscdk_appsync_utils_1.GraphqlType.string(),
          carIds: awscdk_appsync_utils_1.GraphqlType.id({ isList: true }),
        },
        returnType: fleets_object_Type.attribute(),
        dataSource: fleets_data_source,
      })
    );
    props.appsyncApi.schema.addSubscription(
      'onUpdatedFleet',
      new awscdk_appsync_utils_1.ResolvableField({
        returnType: fleets_object_Type.attribute(),
        dataSource: props.appsyncApi.noneDataSource,
        requestMappingTemplate: appsync.MappingTemplate.fromString(`{
                        "version": "2017-02-28",
                    "payload": $util.toJson($context.arguments.entry)
                    }`),
        responseMappingTemplate: appsync.MappingTemplate.fromString(
          '$util.toJson($context.result)'
        ),
        directives: [awscdk_appsync_utils_1.Directive.subscribe('updateFleet')],
      })
    );
    // Grant access so API methods can be invoked
    const admin_api_policy = new iam.Policy(this, 'adminApiPolicy', {
      statements: [
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: ['appsync:GraphQL'],
          resources: [
            `${props.appsyncApi.api.arn}/types/Query/fields/getAllFleets`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/addFleet`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/addedFleet`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/deleteFleet`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/deletedFleet`,
            `${props.appsyncApi.api.arn}/types/Mutation/fields/updateFleet`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/addedFleet`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/deletedFleet`,
            `${props.appsyncApi.api.arn}/types/Subscription/fields/updatedFleet`,
          ],
        }),
      ],
    });
    admin_api_policy.attachToRole(props.adminGroupRole);
  }
}
exports.FleetsManager = FleetsManager;
//# sourceMappingURL=data:application/json;base64,
