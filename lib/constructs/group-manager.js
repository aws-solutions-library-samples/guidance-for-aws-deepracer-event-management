'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.GroupManager = void 0;
const lambdaPython = require('@aws-cdk/aws-lambda-python-alpha');
const aws_cdk_lib_1 = require('aws-cdk-lib');
const apig = require('aws-cdk-lib/aws-apigateway');
const iam = require('aws-cdk-lib/aws-iam');
const lambda = require('aws-cdk-lib/aws-lambda');
const constructs_1 = require('constructs');
class GroupManager extends constructs_1.Construct {
  // public readonly origin: cloudfront.IOrigin;
  // public readonly sourceBucket: s3.IBucket;
  constructor(scope, id, props) {
    super(scope, id);
    // GET groups users Function
    const get_groups_group_function = new lambdaPython.PythonFunction(
      this,
      'get_groups_group_function',
      {
        entry: 'lib/lambdas/get_groups_group_function/',
        description: 'Get the group details from cognito',
        index: 'index.py',
        handler: 'lambda_handler',
        timeout: aws_cdk_lib_1.Duration.minutes(1),
        runtime: props.lambdaConfig.runtime,
        tracing: lambda.Tracing.ACTIVE,
        memorySize: 128,
        architecture: props.lambdaConfig.architecture,
        environment: {
          user_pool_id: props.userPoolId,
          POWERTOOLS_SERVICE_NAME: 'get_groups_group',
          LOG_LEVEL: props.lambdaConfig.layersConfig.powerToolsLogLevel,
        },
        bundling: {
          image: props.lambdaConfig.bundlingImage,
        },
      }
    );
    get_groups_group_function.addToRolePolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['cognito-idp:ListUsersInGroup'],
        resources: [props.userPoolArn],
      })
    );
    // Post groups group user Function
    const postGroupsGroupUserFunction = new lambdaPython.PythonFunction(
      this,
      'postGroupsGroupUserFunction',
      {
        entry: 'lib/lambdas/postGroupsGroupUserFunction/',
        description: 'Add a user to a group in cognito',
        index: 'index.py',
        handler: 'lambda_handler',
        timeout: aws_cdk_lib_1.Duration.minutes(1),
        runtime: props.lambdaConfig.runtime,
        tracing: lambda.Tracing.ACTIVE,
        memorySize: 128,
        architecture: props.lambdaConfig.architecture,
        environment: {
          user_pool_id: props.userPoolId,
          POWERTOOLS_SERVICE_NAME: 'post_groups_group_user',
          LOG_LEVEL: props.lambdaConfig.layersConfig.powerToolsLogLevel,
        },
        bundling: {
          image: props.lambdaConfig.bundlingImage,
        },
      }
    );
    postGroupsGroupUserFunction.addToRolePolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['cognito-idp:AdminAddUserToGroup'],
        resources: [props.userPoolArn],
      })
    );
    // Delete groups group user Function
    const deleteGroupsGroupUserFunction = new lambdaPython.PythonFunction(
      this,
      'deleteGroupsGroupUserFunction',
      {
        entry: 'lib/lambdas/deleteGroupsGroupUserFunction/',
        description: 'Remove a user from a group in cognito',
        index: 'index.py',
        handler: 'lambda_handler',
        timeout: aws_cdk_lib_1.Duration.minutes(1),
        runtime: props.lambdaConfig.runtime,
        tracing: lambda.Tracing.ACTIVE,
        memorySize: 128,
        architecture: props.lambdaConfig.architecture,
        environment: {
          user_pool_id: props.userPoolId,
          POWERTOOLS_SERVICE_NAME: 'delete_groups_group_user',
          LOG_LEVEL: props.lambdaConfig.layersConfig.powerToolsLogLevel,
        },
        bundling: {
          image: props.lambdaConfig.bundlingImage,
        },
      }
    );
    deleteGroupsGroupUserFunction.addToRolePolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['cognito-idp:AdminRemoveUserFromGroup'],
        resources: [props.userPoolArn],
      })
    );
    // Get groups Function
    const get_groups_function = new lambdaPython.PythonFunction(this, 'get_groups_function', {
      entry: 'lib/lambdas/get_groups_function/',
      description: 'List the groups in cognito',
      index: 'index.py',
      handler: 'lambda_handler',
      timeout: aws_cdk_lib_1.Duration.minutes(1),
      runtime: props.lambdaConfig.runtime,
      tracing: lambda.Tracing.ACTIVE,
      memorySize: 128,
      architecture: props.lambdaConfig.architecture,
      environment: {
        user_pool_id: props.userPoolId,
        POWERTOOLS_SERVICE_NAME: 'get_groups',
        LOG_LEVEL: props.lambdaConfig.layersConfig.powerToolsLogLevel,
      },
      bundling: {
        image: props.lambdaConfig.bundlingImage,
      },
    });
    get_groups_function.addToRolePolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['cognito-idp:ListGroups'],
        resources: [props.userPoolArn],
      })
    );
    // Put groups group Function
    const put_groups_group_function = new lambdaPython.PythonFunction(
      this,
      'put_groups_group_function',
      {
        entry: 'lib/lambdas/put_groups_group_function/',
        description: 'Add a group to cognito',
        index: 'index.py',
        handler: 'lambda_handler',
        timeout: aws_cdk_lib_1.Duration.minutes(1),
        runtime: props.lambdaConfig.runtime,
        tracing: lambda.Tracing.ACTIVE,
        memorySize: 128,
        architecture: props.lambdaConfig.architecture,
        environment: {
          user_pool_id: props.userPoolId,
          POWERTOOLS_SERVICE_NAME: 'put_groups_group',
          LOG_LEVEL: props.lambdaConfig.layersConfig.powerToolsLogLevel,
        },
        bundling: {
          image: props.lambdaConfig.bundlingImage,
        },
      }
    );
    put_groups_group_function.addToRolePolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['cognito-idp:CreateGroup'],
        resources: [props.userPoolArn],
      })
    );
    // Delete groups group Function
    const delete_groups_group_function = new lambdaPython.PythonFunction(
      this,
      'delete_groups_group_function',
      {
        entry: 'lib/lambdas/delete_groups_group_function/',
        description: 'Delete a group from cognito',
        index: 'index.py',
        handler: 'lambda_handler',
        timeout: aws_cdk_lib_1.Duration.minutes(1),
        runtime: props.lambdaConfig.runtime,
        tracing: lambda.Tracing.ACTIVE,
        memorySize: 128,
        architecture: props.lambdaConfig.architecture,
        environment: {
          user_pool_id: props.userPoolId,
          POWERTOOLS_SERVICE_NAME: 'delete_groups_group',
          LOG_LEVEL: props.lambdaConfig.layersConfig.powerToolsLogLevel,
        },
        bundling: {
          image: props.lambdaConfig.bundlingImage,
        },
      }
    );
    delete_groups_group_function.addToRolePolicy(
      new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['cognito-idp:DeleteGroup'],
        resources: [props.userPoolArn],
      })
    );
    // API RESOURCES
    const username_groupname_model = props.restApi.api.addModel('UsernameGroupnameModel', {
      contentType: 'application/json',
      schema: {
        schema: apig.JsonSchemaVersion.DRAFT4,
        type: apig.JsonSchemaType.OBJECT,
        properties: {
          username: { type: apig.JsonSchemaType.STRING },
          groupname: { type: apig.JsonSchemaType.STRING },
        },
      },
    });
    // GET /admin/groups
    const apiAdminGroups = props.restApi.apiAdminResource.addResource('groups');
    apiAdminGroups.addMethod('GET', new apig.LambdaIntegration(get_groups_function), {
      authorizationType: apig.AuthorizationType.IAM,
    });
    // PUT /admin/groups
    apiAdminGroups.addMethod('PUT', new apig.LambdaIntegration(put_groups_group_function), {
      authorizationType: apig.AuthorizationType.IAM,
    });
    // /admin/groups/{groupname}
    const group = apiAdminGroups.addResource('{groupname}');
    // GET /admin/groups/{groupname}
    group.addMethod('GET', new apig.LambdaIntegration(get_groups_group_function), {
      authorizationType: apig.AuthorizationType.IAM,
    });
    // DELETE /admin/groups/{groupname}
    group.addMethod('DELETE', new apig.LambdaIntegration(delete_groups_group_function), {
      authorizationType: apig.AuthorizationType.IAM,
    });
    // POST /admin/groups/{groupname}
    group.addMethod('POST', new apig.LambdaIntegration(postGroupsGroupUserFunction), {
      authorizationType: apig.AuthorizationType.IAM,
      requestModels: { 'application/json': username_groupname_model },
      requestValidator: props.restApi.bodyValidator,
    });
    // /admin/groups/{groupname}/{username}
    const group_user = group.addResource('{username}');
    // DELETE /admin/groups/{groupname}/{username}
    group_user.addMethod('DELETE', new apig.LambdaIntegration(deleteGroupsGroupUserFunction), {
      authorizationType: apig.AuthorizationType.IAM,
    });
  }
}
exports.GroupManager = GroupManager;
//# sourceMappingURL=data:application/json;base64,
